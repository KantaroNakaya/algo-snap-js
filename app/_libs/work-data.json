[
    {
        "title": "Q1. 文字列を逆にせよ",
        "description": "与えられた文字列を逆順にして返す関数 `reverseString` を作成してください。",
        "templateCode": "function reverseString(str) {\n  // ここに書くコードを考えてください\n}",
        "answer01_code": "let result = '';\nfor (let i = str.length - 1; i >= 0; i--) {\n  result += str[i];\n}\nreturn result;",
        "answer01_desc": "末尾から1文字ずつ結合",
        "answer02_code": "return str.split('').reverse().join('');",
        "answer02_desc": "配列操作で一括変換",
        "answer03_code": "return Array.from(str).reverse().join('');",
        "answer03_desc": "Array.fromで文字列変換"
    },
    {
        "title": "Q2. 配列の合計を求めよ",
        "description": "整数の配列を受け取り、その合計を返す関数 `sumArray` を作成してください。",
        "templateCode": "function sumArray(arr) {\n  // ここに書くコードを考えてください\n}",
        "answer01_code": "let total = 0;\nfor (let i = 0; i < arr.length; i++) {\n  total += arr[i];\n}\nreturn total;",
        "answer01_desc": "for文で順次加算",
        "answer02_code": "return arr.reduce((sum, n) => sum + n, 0);",
        "answer02_desc": "reduceで集計",
        "answer03_code": "",
        "answer03_desc": ""
    },
    {
        "title": "Q3. 偶数のみ抽出",
        "description": "整数配列から偶数だけを抽出して返す関数 `filterEven` を作成してください。",
        "templateCode": "function filterEven(arr) {\n  // ここに書くコードを考えてください\n}",
        "answer01_code": "const result = [];\nfor (let i = 0; i < arr.length; i++) {\n  if (arr[i] % 2 === 0) {\n    result.push(arr[i]);\n  }\n}\nreturn result;",
        "answer01_desc": "for文で条件分岐",
        "answer02_code": "return arr.filter(n => n % 2 === 0);",
        "answer02_desc": "filterで条件抽出",
        "answer03_code": "",
        "answer03_desc": ""
    },
    {
        "title": "Q4. 文字数をカウントせよ",
        "description": "与えられた文字列の長さを返す関数 `getLength` を作成してください。",
        "templateCode": "function getLength(str) {\n  // ここに書くコードを考えてください\n}",
        "answer01_code": "let count = 0;\nfor (let i = 0; i < str.length; i++) {\n  count++;\n}\nreturn count;",
        "answer01_desc": "for文で1文字ずつカウント",
        "answer02_code": "return str.length;",
        "answer02_desc": "lengthプロパティ使用",
        "answer03_code": "",
        "answer03_desc": ""
    },
    {
        "title": "Q5. 最大値を見つけよ",
        "description": "整数の配列から最大値を返す関数 `getMax` を作成してください。",
        "templateCode": "function getMax(arr) {\n  // ここに書くコードを考えてください\n}",
        "answer01_code": "let max = arr[0];\nfor (let i = 1; i < arr.length; i++) {\n  if (arr[i] > max) {\n    max = arr[i];\n  }\n}\nreturn max;",
        "answer01_desc": "for文で最大値更新",
        "answer02_code": "return Math.max(...arr);",
        "answer02_desc": "Math.maxで一括取得",
        "answer03_code": "",
        "answer03_desc": ""
    },
    {
        "title": "Q6. 配列をソートせよ",
        "description": "整数配列を小さい順に並び替える関数 `sortArray` を作成してください。隣り合う2つの数を比較して、大きい方を右に移動させる方法を使ってください。",
        "templateCode": "function sortArray(arr) {\n  // ここに書くコードを考えてください\n}",
        "answer01_code": "const result = [...arr];\nfor (let i = 0; i < result.length - 1; i++) {\n  for (let j = 0; j < result.length - i - 1; j++) {\n    if (result[j] > result[j + 1]) {\n      const temp = result[j];\n      result[j] = result[j + 1];\n      result[j + 1] = temp;\n    }\n  }\n}\nreturn result;",
        "answer01_desc": "隣り合う数を比較して交換",
        "answer02_code": "return arr.sort((a, b) => a - b);",
        "answer02_desc": "sortメソッド使用",
        "answer03_code": "",
        "answer03_desc": ""
    },
    {
        "title": "Q7. 本棚から本を探す",
        "description": "本棚に本が背表紙の高さ順に並んでいます。特定の高さの本を探す関数 `findBook` を作成してください。",
        "templateCode": "function findBook(books, targetHeight) {\n  // ここに書くコードを考えてください\n}",
        "answer01_code": "let left = 0;\nlet right = books.length - 1;\nwhile (left <= right) {\n  const mid = Math.floor((left + right) / 2);\n  if (books[mid] === targetHeight) return mid;\n  if (books[mid] < targetHeight) left = mid + 1;\n  else right = mid - 1;\n}\nreturn -1;",
        "answer01_desc": "本棚を半分ずつ探す",
        "answer02_code": "return books.indexOf(targetHeight);",
        "answer02_desc": "順番に探す",
        "answer03_code": "",
        "answer03_desc": ""
    },
    {
        "title": "Q8. 階段の上り方",
        "description": "n段の階段があります。1段ずつ、または2段ずつ上ることができます。n段目までの上り方の総数を求める関数 `countWays` を作成してください。",
        "templateCode": "function countWays(n) {\n  // ここに書くコードを考えてください\n}",
        "answer01_code": "if (n <= 1) return 1;\nlet a = 1, b = 1;\nfor (let i = 2; i <= n; i++) {\n  [a, b] = [b, a + b];\n}\nreturn b;",
        "answer01_desc": "順番に計算",
        "answer02_code": "if (n <= 1) return 1;\nreturn countWays(n - 1) + countWays(n - 2);",
        "answer02_desc": "再帰で計算",
        "answer03_code": "const memo = {};\nfunction ways(n) {\n  if (n in memo) return memo[n];\n  if (n <= 1) return 1;\n  memo[n] = ways(n - 1) + ways(n - 2);\n  return memo[n];\n}\nreturn ways(n);",
        "answer03_desc": "計算結果を覚えておく"
    },
    {
        "title": "Q9. 文字列の前後一致判定",
        "description": "与えられた文字列が前から読んでも後ろから読んでも同じになるかどうかを判定する関数 `isPalindrome` を作成してください。",
        "templateCode": "function isPalindrome(str) {\n  // ここに書くコードを考えてください\n}",
        "answer01_code": "let left = 0;\nlet right = str.length - 1;\nwhile (left < right) {\n  if (str[left] !== str[right]) return false;\n  left++;\n  right--;\n}\nreturn true;",
        "answer01_desc": "両端から1文字ずつ比較",
        "answer02_code": "return str === str.split('').reverse().join('');",
        "answer02_desc": "文字列を反転して比較",
        "answer03_code": "const cleanStr = str.toLowerCase().replace(/[^a-z0-9]/g, '');\nreturn cleanStr === cleanStr.split('').reverse().join('');",
        "answer03_desc": "記号を除いて比較"
    },
    {
        "title": "Q10. 配列の重複を削除",
        "description": "配列から重複する要素を削除する関数 `removeDuplicates` を作成してください。",
        "templateCode": "function removeDuplicates(arr) {\n  // ここに書くコードを考えてください\n}",
        "answer01_code": "const result = [];\nfor (const item of arr) {\n  if (!result.includes(item)) {\n    result.push(item);\n  }\n}\nreturn result;",
        "answer01_desc": "for文で重複チェック",
        "answer02_code": "return [...new Set(arr)];",
        "answer02_desc": "Setで一括削除",
        "answer03_code": "return arr.filter((item, index) => arr.indexOf(item) === index);",
        "answer03_desc": "filterで重複除去"
    },
    {
        "title": "Q11. 宝探し",
        "description": "n個の部屋が一列に並んでいます。各部屋には宝の有無が記録されています。宝が隠されている部屋を全て見つける関数 `findTreasures` を作成してください。",
        "templateCode": "function findTreasures(rooms) {\n  // ここに書くコードを考えてください\n}",
        "answer01_code": "const result = [];\nfor (let i = 0; i < rooms.length; i++) {\n  if (rooms[i]) {\n    result.push(i);\n  }\n}\nreturn result;",
        "answer01_desc": "順番に確認",
        "answer02_code": "return rooms.map((hasTreasure, index) => hasTreasure ? index : -1).filter(index => index !== -1);",
        "answer02_desc": "配列操作で一括処理",
        "answer03_code": "",
        "answer03_desc": ""
    }
]