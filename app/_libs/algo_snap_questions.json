[
    {
        "title": "Q1. 文字列を逆にせよ",
        "description": "与えられた文字列を逆順にして返す関数 `reverseString` を作成してください。",
        "templateCode": "function reverseString(str) {\n  // ここに書くコードを考えてください\n}",
        "answer01_code": "let result = '';\nfor (let i = str.length - 1; i >= 0; i--) {\n  result += str[i];\n}\nreturn result;",
        "answer01_desc": "末尾から1文字ずつ結合",
        "answer02_code": "return str.split('').reverse().join('');",
        "answer02_desc": "配列操作で一括変換",
        "answer03_code": "return Array.from(str).reverse().join('');",
        "answer03_desc": "Array.fromで文字列変換"
    },
    {
        "title": "Q2. 配列の合計を求めよ",
        "description": "整数の配列を受け取り、その合計を返す関数 `sumArray` を作成してください。",
        "templateCode": "function sumArray(arr) {\n  // ここに書くコードを考えてください\n}",
        "answer01_code": "let total = 0;\nfor (let i = 0; i < arr.length; i++) {\n  total += arr[i];\n}\nreturn total;",
        "answer01_desc": "for文で順次加算",
        "answer02_code": "return arr.reduce((sum, n) => sum + n, 0);",
        "answer02_desc": "reduceで集計",
        "answer03_code": "",
        "answer03_desc": ""
    },
    {
        "title": "Q3. 偶数のみ抽出",
        "description": "整数配列から偶数だけを抽出して返す関数 `filterEven` を作成してください。",
        "templateCode": "function filterEven(arr) {\n  // ここに書くコードを考えてください\n}",
        "answer01_code": "const result = [];\nfor (let i = 0; i < arr.length; i++) {\n  if (arr[i] % 2 === 0) {\n    result.push(arr[i]);\n  }\n}\nreturn result;",
        "answer01_desc": "for文で条件分岐",
        "answer02_code": "return arr.filter(n => n % 2 === 0);",
        "answer02_desc": "filterで条件抽出",
        "answer03_code": "",
        "answer03_desc": ""
    },
    {
        "title": "Q4. 文字数をカウントせよ",
        "description": "与えられた文字列の長さを返す関数 `getLength` を作成してください。",
        "templateCode": "function getLength(str) {\n  // ここに書くコードを考えてください\n}",
        "answer01_code": "let count = 0;\nfor (let i = 0; i < str.length; i++) {\n  count++;\n}\nreturn count;",
        "answer01_desc": "for文で1文字ずつカウント",
        "answer02_code": "return str.length;",
        "answer02_desc": "lengthプロパティ使用",
        "answer03_code": "",
        "answer03_desc": ""
    },
    {
        "title": "Q5. 最大値を見つけよ",
        "description": "整数の配列から最大値を返す関数 `getMax` を作成してください。",
        "templateCode": "function getMax(arr) {\n  // ここに書くコードを考えてください\n}",
        "answer01_code": "let max = arr[0];\nfor (let i = 1; i < arr.length; i++) {\n  if (arr[i] > max) {\n    max = arr[i];\n  }\n}\nreturn max;",
        "answer01_desc": "for文で最大値更新",
        "answer02_code": "return Math.max(...arr);",
        "answer02_desc": "Math.maxで一括取得",
        "answer03_code": "",
        "answer03_desc": ""
    },
    {
        "title": "Q6. 配列をソートせよ",
        "description": "整数配列を昇順にソートする関数 `sortArray` を作成してください。バブルソートを使用してください。",
        "templateCode": "function sortArray(arr) {\n  // ここに書くコードを考えてください\n}",
        "answer01_code": "const result = [...arr];\nfor (let i = 0; i < result.length - 1; i++) {\n  for (let j = 0; j < result.length - i - 1; j++) {\n    if (result[j] > result[j + 1]) {\n      const temp = result[j];\n      result[j] = result[j + 1];\n      result[j + 1] = temp;\n    }\n  }\n}\nreturn result;",
        "answer01_desc": "バブルソート実装",
        "answer02_code": "return arr.sort((a, b) => a - b);",
        "answer02_desc": "sortメソッド使用",
        "answer03_code": "",
        "answer03_desc": ""
    },
    {
        "title": "Q7. 二分探索",
        "description": "ソート済みの整数配列から特定の値を探す関数 `binarySearch` を作成してください。",
        "templateCode": "function binarySearch(arr, target) {\n  // ここに書くコードを考えてください\n}",
        "answer01_code": "let left = 0;\nlet right = arr.length - 1;\nwhile (left <= right) {\n  const mid = Math.floor((left + right) / 2);\n  if (arr[mid] === target) return mid;\n  if (arr[mid] < target) left = mid + 1;\n  else right = mid - 1;\n}\nreturn -1;",
        "answer01_desc": "範囲を半分ずつ探索",
        "answer02_code": "return arr.indexOf(target);",
        "answer02_desc": "indexOfで線形探索",
        "answer03_code": "",
        "answer03_desc": ""
    },
    {
        "title": "Q8. フィボナッチ数列",
        "description": "n番目のフィボナッチ数を返す関数 `fibonacci` を作成してください。",
        "templateCode": "function fibonacci(n) {\n  // ここに書くコードを考えてください\n}",
        "answer01_code": "if (n <= 1) return n;\nlet a = 0, b = 1;\nfor (let i = 2; i <= n; i++) {\n  [a, b] = [b, a + b];\n}\nreturn b;",
        "answer01_desc": "反復で計算",
        "answer02_code": "if (n <= 1) return n;\nreturn fibonacci(n - 1) + fibonacci(n - 2);",
        "answer02_desc": "再帰で計算",
        "answer03_code": "const memo = {};\nfunction fib(n) {\n  if (n in memo) return memo[n];\n  if (n <= 1) return n;\n  memo[n] = fib(n - 1) + fib(n - 2);\n  return memo[n];\n}\nreturn fib(n);",
        "answer03_desc": "メモ化で最適化"
    },
    {
        "title": "Q9. 回文判定",
        "description": "与えられた文字列が回文かどうかを判定する関数 `isPalindrome` を作成してください。",
        "templateCode": "function isPalindrome(str) {\n  // ここに書くコードを考えてください\n}",
        "answer01_code": "let left = 0;\nlet right = str.length - 1;\nwhile (left < right) {\n  if (str[left] !== str[right]) return false;\n  left++;\n  right--;\n}\nreturn true;",
        "answer01_desc": "両端から比較",
        "answer02_code": "return str === str.split('').reverse().join('');",
        "answer02_desc": "反転して比較",
        "answer03_code": "const cleanStr = str.toLowerCase().replace(/[^a-z0-9]/g, '');\nreturn cleanStr === cleanStr.split('').reverse().join('');",
        "answer03_desc": "正規表現で前処理"
    },
    {
        "title": "Q10. 配列の重複を削除",
        "description": "配列から重複する要素を削除する関数 `removeDuplicates` を作成してください。",
        "templateCode": "function removeDuplicates(arr) {\n  // ここに書くコードを考えてください\n}",
        "answer01_code": "const result = [];\nfor (const item of arr) {\n  if (!result.includes(item)) {\n    result.push(item);\n  }\n}\nreturn result;",
        "answer01_desc": "for文で重複チェック",
        "answer02_code": "return [...new Set(arr)];",
        "answer02_desc": "Setで一括削除",
        "answer03_code": "return arr.filter((item, index) => arr.indexOf(item) === index);",
        "answer03_desc": "filterで重複除去"
    }
]